{"version":3,"sources":["components/SplendidAnimation/SplendidAnimation.tsx","pages/Success/Success.hooks.tsx","pages/Success/SuccessAnimation.tsx","pages/Success/Success.assets/figure-1.svg","pages/Success/Success.assets/figure-2.svg","pages/Success/Success.assets/figure-3.svg","pages/Success/Success.assets/figure-4.svg","pages/Success/Success.assets/figure-5.svg","pages/Success/Success.assets/figure-6.svg","pages/Success/Success.assets/figure-7.svg","pages/Success/Success.assets/figure-8.svg","pages/Success/Success.assets/figure-9.svg","pages/Success/Success@portal.tsx","pages/Success/Success@sberbox.tsx","pages/Success/Success@touch.tsx"],"names":["StyledSpinner","styled","Lottie","isPaused","css","transition","default","defaultConfig","renderer","loop","autoplay","SplendidAnimation","width","height","config","delayMs","props","lottieOptions","React","useMemo","lottieRef","state","pause","play","useLottie","isDelayed","setDelayed","useState","start","useCallback","useLayoutEffect","timeoutId","setTimeout","clearTimeout","isStopped","useSuccessPage","dispatch","useDispatch","deliveryTime","useSelector","delivery","handleClick","closeAppAction","SuccessAnimation","layout","animationData","successAnimationData","module","exports","SuccessPortal","buttons","shouldFocusOnMount","view","ButtonViews","primary","onClick","decorations","text","SuccessSberbox","SuccessTouchContainer","div","SuccessTouchOrderInfo","headerHeight","SuccessTouchOrderNumber","ParagraphText2","secondary","SuccessTouchOrderTime","Headline2","SuccessTouchFigure","params","bgUrl","topPx","leftPx","sizePx","figureList","figureIcon1","figureIcon2","figureIcon3","figureIcon4","figureIcon5","figureIcon6","figureIcon7","figureIcon8","figureIcon9","SuccessTouch","orderId","cart","touchFigureList","map","index","key"],"mappings":"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","file":"static/js/Success.db99b79f.chunk.js","sourcesContent":["import React from 'react';\nimport { useLottie, LottieConfig, Lottie } from 'react-lottie-hook';\nimport styled, { css } from 'styled-components';\nimport { transition } from 'style/const/transition';\n\ninterface StyledSpinnerProps {\n    isPaused: boolean;\n}\n\nconst StyledSpinner = styled(Lottie)<StyledSpinnerProps>`\n    position: relative;\n\n    opacity: 0;\n\n    ${({ isPaused }) =>\n        !isPaused &&\n        css`\n            opacity: 1;\n            transition: opacity ${transition.default};\n        `}\n`;\n\nconst defaultConfig: LottieConfig = {\n    renderer: 'svg',\n    loop: true,\n    autoplay: false,\n};\n\ninterface SplendidAnimationProps {\n    width: number;\n    height: number;\n    config: LottieConfig;\n    delayMs?: number;\n}\n\nexport const SplendidAnimation: React.FC<SplendidAnimationProps> = ({\n    width,\n    height,\n    config,\n    delayMs = 0,\n    ...props\n}) => {\n    const lottieOptions = React.useMemo(\n        () => ({\n            ...defaultConfig,\n            ...config,\n        }),\n        [config],\n    );\n\n    const [lottieRef, state, { pause, play }] = useLottie(lottieOptions);\n\n    // эта магия нужна, потому что Lottie может достаточно долго инициализироватся,\n    // чтобы иногдаморгать первым кадром анимации.\n    // поэтому изначально мы скрываем анимацию, а после инициализации показываем\n\n    const [isDelayed, setDelayed] = React.useState(true);\n\n    const start = React.useCallback(() => {\n        setDelayed(false);\n        play();\n    }, [setDelayed, play]);\n\n    React.useLayoutEffect(() => {\n        pause();\n        const timeoutId = setTimeout(start, delayMs);\n\n        return () => {\n            pause();\n            clearTimeout(timeoutId);\n        };\n    }, [pause, start, delayMs]);\n\n    return (\n        <StyledSpinner\n            lottieRef={lottieRef}\n            isPaused={isDelayed || state.isPaused || state.isStopped}\n            width={width}\n            height={height}\n            {...props}\n        />\n    );\n};\n","import React from 'react';\nimport { useDispatch } from 'hooks/useDispatch';\nimport { useSelector } from 'hooks/useSelector';\nimport { closeAppAction } from 'store/actions/app';\n\nexport const useSuccessPage = () => {\n    const dispatch = useDispatch();\n    const { deliveryTime } = useSelector(({ delivery }) => delivery);\n\n    const handleClick = React.useCallback(() => {\n        dispatch(closeAppAction());\n    }, [dispatch]);\n\n    return { deliveryTime, handleClick };\n};\n","import React from 'react';\nimport { SplendidAnimation } from 'components/SplendidAnimation/SplendidAnimation';\nimport { Layout } from 'style/const/layout';\n\nimport successAnimationData from './Success.assets/success.animation.json';\n\ninterface SuccessAnimationProps {\n    layout: Layout;\n}\nexport const SuccessAnimation: React.FC<SuccessAnimationProps> = ({ layout }) => (\n    <SplendidAnimation\n        width={layout.width}\n        height={layout.height}\n        delayMs={300}\n        config={{\n            loop: false,\n            animationData: successAnimationData,\n        }}\n    />\n);\n","module.exports = __webpack_public_path__ + \"static/media/figure-1.cad64c9b.svg\";","module.exports = __webpack_public_path__ + \"static/media/figure-2.a3044c99.svg\";","module.exports = __webpack_public_path__ + \"static/media/figure-3.7084a68e.svg\";","module.exports = __webpack_public_path__ + \"static/media/figure-4.74f25c1b.svg\";","module.exports = __webpack_public_path__ + \"static/media/figure-5.f121fdae.svg\";","module.exports = __webpack_public_path__ + \"static/media/figure-6.1cf5f7c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/figure-7.ef978761.svg\";","module.exports = __webpack_public_path__ + \"static/media/figure-8.dcc5e538.svg\";","module.exports = __webpack_public_path__ + \"static/media/figure-9.fb8b47f7.svg\";","import React from 'react';\nimport { ButtonViews } from 'components/Button/Button';\nimport { MultilineText } from 'components/MultilineText/MultilineText';\nimport {\n    DialogButtonPortal,\n    DialogPagePortal,\n    DialogTextPortal,\n    DialogTitlePortal,\n} from 'components/DialogPage/DialogPage@portal';\nimport { FullscreenDecoration } from 'components/FullscreenDecoration/FullscreenDecoration';\nimport { layout } from 'style/const/layout@portal';\n\nimport { useSuccessPage } from './Success.hooks';\nimport { SuccessAnimation } from './SuccessAnimation';\n\nconst SuccessPortal: React.FC = () => {\n    const { deliveryTime, handleClick } = useSuccessPage();\n\n    const buttons = React.useMemo(\n        () => (\n            <DialogButtonPortal shouldFocusOnMount view={ButtonViews.primary} onClick={handleClick}>\n                Очень жду\n            </DialogButtonPortal>\n        ),\n        [handleClick],\n    );\n\n    const decorations = React.useMemo(\n        () => (\n            <FullscreenDecoration>\n                <SuccessAnimation layout={layout} />\n            </FullscreenDecoration>\n        ),\n        [],\n    );\n\n    return (\n        <DialogPagePortal buttons={buttons} decorations={decorations}>\n            <DialogTitlePortal>\n                <MultilineText text={`Заказ принят.\\n Будем у вас через\\n ${deliveryTime} минут`} />\n            </DialogTitlePortal>\n            <DialogTextPortal>\n                <MultilineText text={'Чтобы узнать статус заказа,\\n спросите «Какой статус\\n заказа?»'} />\n            </DialogTextPortal>\n        </DialogPagePortal>\n    );\n};\n\nexport default SuccessPortal;\n","import React from 'react';\nimport { ButtonViews } from 'components/Button/Button';\nimport { MultilineText } from 'components/MultilineText/MultilineText';\nimport {\n    DialogButtonSberbox,\n    DialogPageSberbox,\n    DialogTextSberbox,\n    DialogTitleSberbox,\n} from 'components/DialogPage/DialogPage@sberbox';\nimport { FullscreenDecoration } from 'components/FullscreenDecoration/FullscreenDecoration';\nimport { layout } from 'style/const/layout@sberbox';\n\nimport { useSuccessPage } from './Success.hooks';\nimport { SuccessAnimation } from './SuccessAnimation';\n\nconst SuccessSberbox: React.FC = () => {\n    const { deliveryTime, handleClick } = useSuccessPage();\n\n    const buttons = React.useMemo(\n        () => (\n            <DialogButtonSberbox shouldFocusOnMount view={ButtonViews.primary} onClick={handleClick}>\n                Очень жду\n            </DialogButtonSberbox>\n        ),\n        [handleClick],\n    );\n\n    const decorations = React.useMemo(\n        () => (\n            <FullscreenDecoration>\n                <SuccessAnimation layout={layout} />\n            </FullscreenDecoration>\n        ),\n        [],\n    );\n\n    return (\n        <DialogPageSberbox buttons={buttons} decorations={decorations}>\n            <DialogTitleSberbox>\n                <MultilineText text={`Заказ принят. \\nБудем у вас через \\n${deliveryTime} минут`} />\n            </DialogTitleSberbox>\n            <DialogTextSberbox>\n                <MultilineText text={'Чтобы узнать статус заказа, спросите \\n«Какой статус заказа?»'} />\n            </DialogTextSberbox>\n        </DialogPageSberbox>\n    );\n};\n\nexport default SuccessSberbox;\n","import React, { useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport { Headline2, ParagraphText2 } from '@sberdevices/plasma-styles';\nimport { primary, secondary } from '@sberdevices/plasma-tokens';\nimport { useSelector } from 'hooks/useSelector';\nimport { layout } from 'style/const/layout@touch';\n\nimport figureIcon1 from './Success.assets/figure-1.svg';\nimport figureIcon2 from './Success.assets/figure-2.svg';\nimport figureIcon3 from './Success.assets/figure-3.svg';\nimport figureIcon4 from './Success.assets/figure-4.svg';\nimport figureIcon5 from './Success.assets/figure-5.svg';\nimport figureIcon6 from './Success.assets/figure-6.svg';\nimport figureIcon7 from './Success.assets/figure-7.svg';\nimport figureIcon8 from './Success.assets/figure-8.svg';\nimport figureIcon9 from './Success.assets/figure-9.svg';\n\nconst SuccessTouchContainer = styled.div`\n    position: relative;\n\n    height: 100vh;\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst SuccessTouchOrderInfo = styled.div`\n    text-align: center;\n    padding: 0 30px;\n\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    margin-top: -${layout.headerHeight}px;\n`;\n\nconst SuccessTouchOrderNumber = styled(ParagraphText2)`\n    color: ${secondary};\n`;\n\nconst SuccessTouchOrderTime = styled(Headline2)`\n    margin-top: 10px;\n\n    color: ${primary};\n`;\n\ninterface FigureTouchProps {\n    params: [string, number, number, number];\n}\n\nconst SuccessTouchFigure = styled.div<FigureTouchProps>`\n    position: absolute;\n\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: contain;\n\n    ${({ params: [bgUrl, topPx, leftPx, sizePx] }) => css`\n        top: ${topPx}%;\n        left: ${leftPx}%;\n\n        height: ${sizePx}px;\n        width: ${sizePx}px;\n\n        background-image: url('${bgUrl}');\n    `}\n`;\n\nconst figureList: FigureTouchProps['params'][] = [\n    [figureIcon1, 6.1, 13.9, 30],\n    [figureIcon2, 27.3, 83.7, 36],\n    [figureIcon3, 0.6, 78, 24],\n    [figureIcon4, 70.6, 74, 32],\n    [figureIcon5, 51.4, 62.2, 31],\n    [figureIcon6, 20.6, 51.3, 28],\n    [figureIcon7, 15.6, 39.7, 18],\n    [figureIcon8, 53.8, 46.5, 20],\n    [figureIcon9, 63.8, 18, 36],\n    [figureIcon4, 44.3, 11.3, 17],\n];\n\nconst SuccessTouch: React.FC = () => {\n    const deliveryTime = useSelector(({ delivery }) => delivery.deliveryTime);\n    const { orderId } = useSelector(({ cart }) => cart);\n    const touchFigureList = useMemo(\n        () => figureList.map((params, index) => <SuccessTouchFigure key={index} params={params} />),\n        [],\n    );\n\n    return (\n        <SuccessTouchContainer>\n            <SuccessTouchOrderInfo>\n                <SuccessTouchOrderNumber>Заказ #{orderId} оформлен</SuccessTouchOrderNumber>\n                <SuccessTouchOrderTime>\n                    Спасибо за заказ!\n                    <br />\n                    Будем у вас через {deliveryTime} минут.\n                </SuccessTouchOrderTime>\n            </SuccessTouchOrderInfo>\n            {touchFigureList}\n        </SuccessTouchContainer>\n    );\n};\n\nexport default SuccessTouch;\n"],"sourceRoot":""}