{"version":3,"sources":["components/SplendidAnimation/SplendidAnimation.tsx","pages/Wait/WaitAnimation.tsx","pages/Wait/Wait@portal.tsx","pages/Wait/Wait@sberbox.tsx"],"names":["StyledSpinner","styled","Lottie","isPaused","css","transition","default","defaultConfig","renderer","loop","autoplay","SplendidAnimation","width","height","config","delayMs","props","lottieOptions","React","useMemo","lottieRef","state","pause","play","useLottie","isDelayed","setDelayed","useState","start","useCallback","useLayoutEffect","timeoutId","setTimeout","clearTimeout","isStopped","WaitAnimation","layout","animationData","waitAnimationData","WaitPortal","decorations","text","WaitSberbox"],"mappings":"oGAAA,8EASA,MAAMA,EAAgBC,YAAOC,KAAV,oCAAGD,CAAH,oCAKb,EAAGE,eACAA,GACDC,YADA,sCAG0BC,IAAWC,UAIvCC,EAA8B,CAChCC,SAAU,MACVC,MAAM,EACNC,UAAU,GAUDC,EAAsD,EAC/DC,QACAC,SACAC,SACAC,UAAU,KACPC,MAEH,MAAMC,EAAgBC,IAAMC,QACxB,SACOZ,KACAO,IAEP,CAACA,KAGEM,EAAWC,GAAO,MAAEC,EAAF,KAASC,IAAUC,YAAUP,IAM/CQ,EAAWC,GAAcR,IAAMS,UAAS,GAEzCC,EAAQV,IAAMW,YAAY,KAC5BH,GAAW,GACXH,KACD,CAACG,EAAYH,IAYhB,OAVAL,IAAMY,gBAAgB,KAClBR,IACA,MAAMS,EAAYC,WAAWJ,EAAOb,GAEpC,MAAO,KACHO,IACAW,aAAaF,KAElB,CAACT,EAAOM,EAAOb,IAGd,kBAACf,EAAD,eACIoB,UAAWA,EACXjB,SAAUsB,GAAaJ,EAAMlB,UAAYkB,EAAMa,UAC/CtB,MAAOA,EACPC,OAAQA,GACJG,M,iCC/EhB,wEAUO,MAAMmB,EAA8C,EAAGC,YAC1D,kBAAC,IAAD,CACIxB,MAAOwB,EAAOxB,MACdC,OAAQuB,EAAOvB,OACfE,QAAS,EACTD,OAAQ,CACJuB,cAAeC,M,uv6HChB3B,oEA2BeC,UAnBc,KACzB,MAAMC,EAActB,IAAMC,QACtB,IACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAeiB,OAAQA,OAG/B,IAGJ,OACI,kBAAC,IAAD,CAAkBI,YAAaA,GAC3B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAeC,KAAM,gG,iCCrBrC,oEA2BeC,UAnBe,KAC1B,MAAMF,EAActB,IAAMC,QACtB,IACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAeiB,OAAQA,OAG/B,IAGJ,OACI,kBAAC,IAAD,CAAmBI,YAAaA,GAC5B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAeC,KAAM","file":"static/js/Wait.0e376a23.chunk.js","sourcesContent":["import React from 'react';\nimport { useLottie, LottieConfig, Lottie } from 'react-lottie-hook';\nimport styled, { css } from 'styled-components';\nimport { transition } from 'style/const/transition';\n\ninterface StyledSpinnerProps {\n    isPaused: boolean;\n}\n\nconst StyledSpinner = styled(Lottie)<StyledSpinnerProps>`\n    position: relative;\n\n    opacity: 0;\n\n    ${({ isPaused }) =>\n        !isPaused &&\n        css`\n            opacity: 1;\n            transition: opacity ${transition.default};\n        `}\n`;\n\nconst defaultConfig: LottieConfig = {\n    renderer: 'svg',\n    loop: true,\n    autoplay: false,\n};\n\ninterface SplendidAnimationProps {\n    width: number;\n    height: number;\n    config: LottieConfig;\n    delayMs?: number;\n}\n\nexport const SplendidAnimation: React.FC<SplendidAnimationProps> = ({\n    width,\n    height,\n    config,\n    delayMs = 0,\n    ...props\n}) => {\n    const lottieOptions = React.useMemo(\n        () => ({\n            ...defaultConfig,\n            ...config,\n        }),\n        [config],\n    );\n\n    const [lottieRef, state, { pause, play }] = useLottie(lottieOptions);\n\n    // эта магия нужна, потому что Lottie может достаточно долго инициализироватся,\n    // чтобы иногдаморгать первым кадром анимации.\n    // поэтому изначально мы скрываем анимацию, а после инициализации показываем\n\n    const [isDelayed, setDelayed] = React.useState(true);\n\n    const start = React.useCallback(() => {\n        setDelayed(false);\n        play();\n    }, [setDelayed, play]);\n\n    React.useLayoutEffect(() => {\n        pause();\n        const timeoutId = setTimeout(start, delayMs);\n\n        return () => {\n            pause();\n            clearTimeout(timeoutId);\n        };\n    }, [pause, start, delayMs]);\n\n    return (\n        <StyledSpinner\n            lottieRef={lottieRef}\n            isPaused={isDelayed || state.isPaused || state.isStopped}\n            width={width}\n            height={height}\n            {...props}\n        />\n    );\n};\n","import React from 'react';\nimport { SplendidAnimation } from 'components/SplendidAnimation/SplendidAnimation';\nimport { Layout } from 'style/const/layout';\n\nimport waitAnimationData from './Wait.assets/wait.animation.json';\n\ninterface WaitAnimationProps {\n    layout: Layout;\n}\n\nexport const WaitAnimation: React.FC<WaitAnimationProps> = ({ layout }) => (\n    <SplendidAnimation\n        width={layout.width}\n        height={layout.height}\n        delayMs={0}\n        config={{\n            animationData: waitAnimationData,\n        }}\n    />\n);\n","import React from 'react';\nimport { MultilineText } from 'components/MultilineText/MultilineText';\nimport { DialogPagePortal, DialogTitlePortal } from 'components/DialogPage/DialogPage@portal';\nimport { FullscreenDecoration } from 'components/FullscreenDecoration/FullscreenDecoration';\nimport { layout } from 'style/const/layout@portal';\n\nimport { WaitAnimation } from './WaitAnimation';\n\nconst WaitPortal: React.FC = () => {\n    const decorations = React.useMemo(\n        () => (\n            <FullscreenDecoration>\n                <WaitAnimation layout={layout} />\n            </FullscreenDecoration>\n        ),\n        [],\n    );\n\n    return (\n        <DialogPagePortal decorations={decorations}>\n            <DialogTitlePortal>\n                <MultilineText text={'Оформляем\\n заказ'} />\n            </DialogTitlePortal>\n        </DialogPagePortal>\n    );\n};\n\nexport default WaitPortal;\n","import React from 'react';\nimport { MultilineText } from 'components/MultilineText/MultilineText';\nimport { FullscreenDecoration } from 'components/FullscreenDecoration/FullscreenDecoration';\nimport { DialogPageSberbox, DialogTitleSberbox } from 'components/DialogPage/DialogPage@sberbox';\nimport { layout } from 'style/const/layout@sberbox';\n\nimport { WaitAnimation } from './WaitAnimation';\n\nconst WaitSberbox: React.FC = () => {\n    const decorations = React.useMemo(\n        () => (\n            <FullscreenDecoration>\n                <WaitAnimation layout={layout} />\n            </FullscreenDecoration>\n        ),\n        [],\n    );\n\n    return (\n        <DialogPageSberbox decorations={decorations}>\n            <DialogTitleSberbox>\n                <MultilineText text={'Оформляем\\n заказ'} />\n            </DialogTitleSberbox>\n        </DialogPageSberbox>\n    );\n};\n\nexport default WaitSberbox;\n"],"sourceRoot":""}