{"version":3,"sources":["pages/AddressFullAll/AddressFullAll@sberbox.tsx","components/Input/Input@touch.tsx","pages/AddressFullAll/AddressFullAll@touch.tsx"],"names":["SubmitButton","styled","Button","StyledRoot","div","AddressFullAllSberbox","addressInputValue","phoneNumberInputValue","apartmentInputValue","entranceInputValue","floorInputValue","doorCodeInputValue","isSubmitButtonDisabled","nextFocus","isPhoneValid","handleAddressKeyPress","handlePhoneKeyPress","handleApartmentKeyPress","handleSubmitClick","handleDoorCodeKeyPress","handleEntranceKeyPress","handleFloorKeyPress","useAddressFull","title","onChange","noop","onRootKeyPress","value","shouldFocusOnMount","ROUTES","ADDRESS_FULL_PHONE","isInvalid","ADDRESS_FULL_APARTMENT","ADDRESS_FULL_ENTRANCE","ADDRESS_FULL_FLOOR","ADDRESS_FULL_DOOR_CODE","view","ButtonViews","secondary","primary","ADDRESS_FULL_ALL","disabled","shouldLockAfterClick","onClick","fill","id","offset","stopColor","StyledTitle","isFocused","critical","accent","tertiary","isMinified","css","StyledInput","input","$isEmpty","fontWeights","Medium","StyledWrapper","surfaceLiquid01","transition","default","Input","className","type","onSubmit","forwardRef","forwardInputRef","shouldFocusInputOnMount","setFocus","React","useState","isUsing","setUsing","inputRootRef","useRef","inputRef","onMountRootRef","useFocusOnMount","rootRef","handleRootFocus","useCallback","handleRootBlur","handleRootKeyPress","e","current","defaultPrevented","focus","handleInputKeyPress","event","key","stopPropagation","useEffect","isTitleMinified","Boolean","isEmptyValue","length","tabIndex","ref","onFocus","onBlur","onKeyPress","StyledAddressFullAllTouch","StyledVoiceHint","Body1","StyledPlasmaIcon","PlasmaIcon","Row","PaddingRow","TwoRow","AddressFullAllTouch","dispatch","useDispatch","useSelector","addressFullPage","handleApartmentInputChange","addressFullApartmentInputChangeAction","target","handleEntranceInputChange","addressFullEntranceInputChangeAction","handleFloorInputChange","addressFullFloorInputChangeAction","handleDoorCodeInputChange","addressFullDoorCodeInputChangeAction","handlePhoneInputChange","nativeEvent","InputEvent","inputType","data","addressFullPhoneNumberInputChangeAction","addressFullSubmitAction"],"mappings":"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","file":"static/js/AddressFullAll.4736a9e5.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { noop } from 'tools/noop';\nimport { Button, ButtonViews } from 'components/Button/Button';\nimport { Input } from 'components/Input/Input';\nimport { ROUTES } from 'store/constants/router';\n\nimport { useAddressFull } from './AddressFullAll.hooks';\nimport {\n    StyledFirstRow,\n    StyledSecondRow,\n    StyledThirdRow,\n    StyledFourthRow,\n    StyledPlasmaIcon,\n    StyledVoiceHint,\n} from './AddressFullAll@common';\n\nconst SubmitButton = styled(Button)`\n    flex-grow: 0;\n    padding: 32px 40px;\n\n    &[disabled] {\n        opacity: 0.3;\n    }\n`;\n\nconst StyledRoot = styled.div`\n    display: grid;\n    padding: 82px 128px 0;\n    box-sizing: border-box;\n    grid-gap: 48px 32px;\n    grid-template-areas: 'first-row' 'second-row' 'third-row' 'fourth-row';\n\n    will-change: transform;\n`;\n\nconst AddressFullAllSberbox: React.FC = () => {\n    const {\n        addressInputValue,\n        phoneNumberInputValue,\n        apartmentInputValue,\n        entranceInputValue,\n        floorInputValue,\n        doorCodeInputValue,\n        isSubmitButtonDisabled,\n        nextFocus,\n        isPhoneValid,\n        handleAddressKeyPress,\n        handlePhoneKeyPress,\n        handleApartmentKeyPress,\n        handleSubmitClick,\n        handleDoorCodeKeyPress,\n        handleEntranceKeyPress,\n        handleFloorKeyPress,\n    } = useAddressFull();\n\n    return (\n        <StyledRoot>\n            <StyledFirstRow>\n                <Input\n                    title=\"Улица и дом\"\n                    onChange={noop} // реакт запрещает прокидывать в инпут значение без обработчика изменений\n                    onRootKeyPress={handleAddressKeyPress}\n                    value={addressInputValue}\n                />\n                <Input\n                    title=\"Номер телефона\"\n                    shouldFocusOnMount={nextFocus === ROUTES.ADDRESS_FULL_PHONE}\n                    onChange={noop} // реакт запрещает прокидывать в инпут значение без обработчика изменений\n                    onRootKeyPress={handlePhoneKeyPress}\n                    value={phoneNumberInputValue}\n                    isInvalid={!isPhoneValid}\n                />\n            </StyledFirstRow>\n            <StyledSecondRow>\n                <Input\n                    title=\"Квартира\"\n                    shouldFocusOnMount={nextFocus === ROUTES.ADDRESS_FULL_APARTMENT}\n                    onChange={noop} // реакт запрещает прокидывать в инпут значение без обработчика изменений\n                    onRootKeyPress={handleApartmentKeyPress}\n                    value={apartmentInputValue}\n                />\n                <Input\n                    title=\"Подъезд\"\n                    shouldFocusOnMount={nextFocus === ROUTES.ADDRESS_FULL_ENTRANCE}\n                    onChange={noop} // реакт запрещает прокидывать в инпут значение без обработчика изменений\n                    onRootKeyPress={handleEntranceKeyPress}\n                    value={entranceInputValue}\n                />\n                <Input\n                    title=\"Этаж\"\n                    shouldFocusOnMount={nextFocus === ROUTES.ADDRESS_FULL_FLOOR}\n                    onChange={noop} // реакт запрещает прокидывать в инпут значение без обработчика изменений\n                    onRootKeyPress={handleFloorKeyPress}\n                    value={floorInputValue}\n                />\n            </StyledSecondRow>\n            <StyledThirdRow>\n                <Input\n                    title=\"Комментарий\"\n                    shouldFocusOnMount={nextFocus === ROUTES.ADDRESS_FULL_DOOR_CODE}\n                    onChange={noop} // реакт запрещает прокидывать в инпут значение без обработчика изменений\n                    onRootKeyPress={handleDoorCodeKeyPress}\n                    value={doorCodeInputValue}\n                />\n            </StyledThirdRow>\n            <StyledFourthRow>\n                <SubmitButton\n                    view={isSubmitButtonDisabled ? ButtonViews.secondary : ButtonViews.primary}\n                    shouldFocusOnMount={nextFocus === ROUTES.ADDRESS_FULL_ALL}\n                    disabled={isSubmitButtonDisabled}\n                    shouldLockAfterClick\n                    onClick={handleSubmitClick}\n                >\n                    Сохранить\n                </SubmitButton>\n                <StyledVoiceHint>\n                    <StyledPlasmaIcon fill=\"url(#plasma-green-gradient)\">\n                        <linearGradient id=\"plasma-green-gradient\">\n                            <stop offset=\"0%\" stopColor=\"#00ffdf\" />\n                            <stop offset=\"100%\" stopColor=\"#00ff5a\" />\n                        </linearGradient>\n                    </StyledPlasmaIcon>\n                    Вы можете изменять данные голосом\n                </StyledVoiceHint>\n            </StyledFourthRow>\n        </StyledRoot>\n    );\n};\n\nexport default AddressFullAllSberbox;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { useFocusOnMount } from 'hooks/useFocusOnMount';\nimport { transition } from 'style/const/transition';\nimport { accent, critical, fontWeights, surfaceLiquid01, tertiary } from '@sberdevices/plasma-tokens';\n\ninterface StyledTitleProps {\n    isMinified?: boolean;\n    isFocused?: boolean;\n    isInvalid?: boolean;\n}\nconst StyledTitle = styled.div<StyledTitleProps>`\n    position: absolute;\n    left: 16px;\n    top: 18px;\n\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 20px;\n    letter-spacing: -0.3px;\n\n    color: ${({ isInvalid, isFocused }) => {\n        if (isInvalid) {\n            return critical;\n        }\n\n        if (isFocused) {\n            return accent;\n        }\n\n        return tertiary;\n    }};\n\n    transition: font-size 0.2s ease-in-out, top 0.2s ease-in-out, color 0.2s ease-in-out;\n\n    ${({ isMinified }) =>\n        isMinified &&\n        css`\n            top: 6px;\n            font-size: 12px;\n            line-height: 16px;\n        `};\n`;\n\ninterface StyledInputProps {\n    disabled?: boolean;\n    $isEmpty: boolean;\n}\nconst StyledInput = styled.input<StyledInputProps>`\n    margin-top: ${({ $isEmpty }) => ($isEmpty ? 4 : 12)}px; // 4 12\n    height: 40px;\n    width: 100%;\n    font-family: inherit;\n    font-weight: ${fontWeights.Medium};\n    font-size: 16px;\n    color: ${({ disabled }) => (disabled ? 'rgba(255, 255, 255, 0.28)' : '#fff')};\n    caret-color: ${accent};\n    line-height: 20px;\n    letter-spacing: -0.3px;\n    padding: 0;\n    border: none;\n    background: transparent;\n`;\n\nconst StyledWrapper = styled.div`\n    position: relative;\n    box-sizing: border-box;\n    height: 64px;\n    padding: 4px 16px;\n    background-color: ${surfaceLiquid01};\n`;\n\ninterface StyledRootProps {\n    isFocused?: boolean;\n}\nconst StyledRoot = styled.div<StyledRootProps>`\n    margin: -4px;\n    height: 64px;\n    box-sizing: border-box;\n    border: 4px solid transparent;\n    border-radius: 16px;\n\n    overflow: hidden;\n\n    transition: border ${transition.default};\n`;\n\ninterface InputProps {\n    title: string;\n    value: string;\n    className?: string;\n    type?: string;\n    disabled?: boolean;\n    isInvalid?: boolean;\n    onSubmit?: (event: React.SyntheticEvent<HTMLInputElement>) => void;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    onRootKeyPress?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    forwardRef?: React.RefObject<HTMLDivElement>;\n    forwardInputRef?: React.RefObject<HTMLInputElement>;\n    shouldFocusOnMount?: boolean;\n    shouldFocusInputOnMount?: boolean;\n}\n\nexport const Input: React.FC<InputProps> = ({\n    title,\n    value,\n    className,\n    type = 'text',\n    disabled,\n    isInvalid,\n    onSubmit,\n    onChange,\n    onRootKeyPress,\n    forwardRef,\n    forwardInputRef,\n    shouldFocusOnMount,\n    shouldFocusInputOnMount,\n}) => {\n    const [isFocused, setFocus] = React.useState(false);\n    const [isUsing, setUsing] = React.useState(false);\n    const inputRootRef = React.useRef<HTMLInputElement>(null);\n    const inputRef = forwardInputRef || inputRootRef;\n    const onMountRootRef = useFocusOnMount<HTMLDivElement>(forwardRef);\n    const rootRef = shouldFocusOnMount ? onMountRootRef : forwardRef;\n    const handleRootFocus = React.useCallback(() => setFocus(true), [setFocus]);\n    const handleRootBlur = React.useCallback(() => {\n        setFocus(false);\n        setUsing(false);\n    }, [setFocus, setUsing]);\n    const handleRootKeyPress = React.useCallback(\n        (e: React.KeyboardEvent<HTMLInputElement>) => {\n            if (inputRef && inputRef.current) {\n                if (onRootKeyPress) {\n                    onRootKeyPress(e);\n                }\n\n                if (!e.defaultPrevented) {\n                    inputRef.current.focus();\n                    setUsing(true);\n                }\n            }\n        },\n        [onRootKeyPress, setUsing, inputRef],\n    );\n    const handleInputKeyPress = React.useCallback(\n        (event: React.KeyboardEvent<HTMLInputElement>) => {\n            if (onSubmit && event && event.key === 'Enter') {\n                event.stopPropagation();\n                onSubmit(event);\n            }\n        },\n        [onSubmit],\n    );\n\n    React.useEffect(() => {\n        if (shouldFocusInputOnMount && inputRef && inputRef.current) {\n            inputRef.current.focus();\n            setUsing(true);\n        }\n    }, [shouldFocusInputOnMount, inputRef, setUsing]);\n\n    const isTitleMinified = isUsing || Boolean(value);\n    const isEmptyValue = !value.length;\n\n    return (\n        <StyledRoot\n            tabIndex={disabled ? -1 : 0}\n            className={className}\n            ref={rootRef}\n            isFocused={isFocused}\n            onFocus={handleRootFocus}\n            onBlur={handleRootBlur}\n            onKeyPress={handleRootKeyPress}\n        >\n            <StyledWrapper>\n                <StyledTitle isMinified={isTitleMinified} isFocused={isFocused} isInvalid={isInvalid}>\n                    {title}\n                </StyledTitle>\n                <StyledInput\n                    tabIndex={-1}\n                    ref={inputRef}\n                    type={type}\n                    disabled={disabled}\n                    onKeyPress={handleInputKeyPress}\n                    onChange={onChange}\n                    value={value}\n                    $isEmpty={isEmptyValue}\n                />\n            </StyledWrapper>\n        </StyledRoot>\n    );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Body1 } from '@sberdevices/plasma-styles';\nimport { PlasmaIcon } from 'components/PlasmaIcon/PlasmaIcon';\nimport { Input } from 'components/Input/Input@touch';\nimport { Button, ButtonViews } from 'components/Button/Button';\nimport { useDispatch } from 'hooks/useDispatch';\nimport { useSelector } from 'hooks/useSelector';\nimport {\n    addressFullApartmentInputChangeAction,\n    addressFullDoorCodeInputChangeAction,\n    addressFullEntranceInputChangeAction,\n    addressFullFloorInputChangeAction,\n    addressFullPhoneNumberInputChangeAction,\n} from 'store/actions/addressFullPage';\nimport { addressFullSubmitAction } from 'store/actions/server';\nimport { noop } from 'tools/noop';\n\nconst StyledAddressFullAllTouch = styled.div`\n    overflow-y: auto;\n    box-sizing: border-box;\n    display: grid;\n    grid-row-gap: 16px;\n    grid-column-gap: 32px;\n    padding: 14px 16px 0;\n`;\n\nconst StyledVoiceHint = styled(Body1)`\n    display: flex;\n    align-items: center;\n    background: linear-gradient(to right, #00ffdf, #00ff5a);\n    color: transparent;\n    -webkit-background-clip: text;\n    padding-bottom: 16px;\n`;\n\nconst StyledPlasmaIcon = styled(PlasmaIcon)`\n    height: 64px;\n    width: 72px;\n    box-sizing: border-box;\n    background: rgba(255, 255, 255, 0.03);\n    box-shadow: inset 0 2px 2px rgba(255, 255, 255, 0.15);\n    border-radius: 100%;\n    margin-right: 16px;\n    padding: 16px;\n`;\n\nconst Row = styled.div`\n    display: grid;\n`;\n\nconst PaddingRow = styled(Row)`\n    padding-bottom: 16px;\n`;\n\nconst TwoRow = styled(Row)`\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 8px;\n`;\n\nconst SubmitButton = styled(Button)`\n    flex-grow: 0;\n    padding: 4px 0;\n    width: 143px;\n    font-size: 16px;\n    border-radius: 16px;\n\n    &[disabled] {\n        opacity: 0.3;\n    }\n`;\n\nconst AddressFullAllTouch: React.FC = () => {\n    const dispatch = useDispatch();\n    const {\n        addressInputValue,\n        phoneNumberInputValue,\n        apartmentInputValue,\n        entranceInputValue,\n        floorInputValue,\n        doorCodeInputValue,\n        isSubmitButtonDisabled,\n        isPhoneValid,\n    } = useSelector(({ addressFullPage }) => addressFullPage);\n\n    const handleApartmentInputChange = React.useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            dispatch(addressFullApartmentInputChangeAction(e.target.value));\n        },\n        [dispatch],\n    );\n\n    const handleEntranceInputChange = React.useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            dispatch(addressFullEntranceInputChangeAction(e.target.value));\n        },\n        [dispatch],\n    );\n\n    const handleFloorInputChange = React.useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            dispatch(addressFullFloorInputChangeAction(e.target.value));\n        },\n        [dispatch],\n    );\n\n    const handleDoorCodeInputChange = React.useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            dispatch(addressFullDoorCodeInputChangeAction(e.target.value));\n        },\n        [dispatch],\n    );\n\n    const handlePhoneInputChange = React.useCallback(\n        ({ nativeEvent }: React.ChangeEvent<HTMLInputElement>) => {\n            if (nativeEvent instanceof InputEvent) {\n                const { inputType, data } = nativeEvent;\n\n                dispatch(addressFullPhoneNumberInputChangeAction({ inputType, data }));\n            }\n        },\n        [dispatch],\n    );\n\n    const handleSubmitClick = React.useCallback(() => {\n        dispatch(addressFullSubmitAction());\n    }, [dispatch]);\n\n    return (\n        <StyledAddressFullAllTouch>\n            <StyledVoiceHint>\n                <StyledPlasmaIcon fill=\"url(#plasma-green-gradient)\">\n                    <linearGradient id=\"plasma-green-gradient\">\n                        <stop offset=\"0%\" stopColor=\"#00FFE6\" />\n                        <stop offset=\"100%\" stopColor=\"#80FF00\" />\n                    </linearGradient>\n                </StyledPlasmaIcon>\n                Вы можете заполнять данные голосом\n            </StyledVoiceHint>\n            <PaddingRow>\n                <Input title=\"Улица и дом\" value={addressInputValue} onChange={noop} />\n            </PaddingRow>\n            <Row>\n                <Input title=\"Квартира\" value={apartmentInputValue} onChange={handleApartmentInputChange} />\n            </Row>\n            <TwoRow>\n                <Input title=\"Подъезд\" value={entranceInputValue} onChange={handleEntranceInputChange} />\n                <Input title=\"Этаж\" value={floorInputValue} onChange={handleFloorInputChange} />\n            </TwoRow>\n            <PaddingRow>\n                <Input title=\"Комментарий\" value={doorCodeInputValue} onChange={handleDoorCodeInputChange} />\n            </PaddingRow>\n            <PaddingRow>\n                <Input\n                    title=\"Номер телефона\"\n                    value={phoneNumberInputValue}\n                    onChange={handlePhoneInputChange}\n                    isInvalid={!isPhoneValid}\n                />\n            </PaddingRow>\n            <Row>\n                <SubmitButton\n                    view={ButtonViews.primary}\n                    shouldLockAfterClick\n                    onClick={handleSubmitClick}\n                    disabled={isSubmitButtonDisabled}\n                >\n                    Сохранить\n                </SubmitButton>\n            </Row>\n        </StyledAddressFullAllTouch>\n    );\n};\n\nexport default AddressFullAllTouch;\n"],"sourceRoot":""}