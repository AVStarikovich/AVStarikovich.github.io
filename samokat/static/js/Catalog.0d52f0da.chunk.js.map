{"version":3,"sources":["pages/Catalog/ListItem/CatalogListItem@sberbox.tsx","hooks/useFocusOnChange.ts","pages/Catalog/List/CatalogList@sberbox.tsx","pages/Catalog/Skeleton/CatalogSkeleton@sberbox.tsx","pages/Catalog/Catalog@sberbox.tsx","pages/Catalog/ListItem/CatalogListItem@touch.tsx","pages/Catalog/List/CatalogList@touch.tsx","pages/Catalog/Catalog@touch.tsx"],"names":["StyledThumb","styled","div","props","imageUrl","StyledDescription","cardHeightPx","StyledName","Body1","primary","StyledPriceContainer","StyledPrice","Body2","StyledOldPrice","StyledCount","isWarning","warning","accent","buttonIconSizePx","icon","m","sizePx","StyledButton","Button2","isDisabled","buttonSecondary","transition","default","StyledPlusIcon","PlusSvg","StyledDoneIcon","DoneSvg","CatalogListItemBadge","Badge","StyledIndexBadge","IndexBadge","AddAnimation","css","keyframes","addActiveDurationMs","ShakeAnimation","StyledCatalogListItem","surfaceLiquid01","timingFn","focusBorderMixin","borderRadius","disabled","isButtonDisabled","isActive","isShaking","CatalogListItemSberbox","id","dispatch","useDispatch","itemFocusHash","useSelector","catalogPage","itemsFocusHashMap","count","isWantMoreThanHave","index","name","price","oldPrice","badge","itemsMap","isCardActive","isButtonActive","displayCount","setCardActive","React","useState","setButtonActive","setDisplayCount","prevCountRef","useRef","useEffect","current","nextCount","setTimeout","useActive","doShake","setShaking","useCallback","useShake","handleFocus","catalogSelectItemAction","handleClick","addItemAction","item","skipFocus","ref","forwardRef","hash","timeout","onChangeFocusRef","HTMLElement","focus","useFocusOnChange","undefined","tabIndex","onFocus","onClick","size","StyledCatalogList","layout","contentHeight","StyledWrapper","catalogListScrollSpeed","CatalogListSberbox","order","wrapperXShift","wrapperStyle","useMemo","transform","onScroll","preventScroll","style","map","itemId","key","columnCount","Math","floor","width","getWidthByCount","skeletonWidth","skeletonPaddingX","skeletonPaddingY","backgroundColor","foregroundColor","surfaceLiquid02","StyledRoot","CatalogSkeletonSberbox","Skeleton","height","itemWidth","itemHeight","rowCount","paddingBetweenRows","paddingBetweenColumns","speed","CatalogSberbox","length","StyledListItem","StyledAddIcon","AddSvg","StyledRemoveIcon","RemoveSvg","StyledButtonsContainer","StyledTouchButton","StyledCountTouchButton","CatalogListItemTouch","catalogPageTouch","isPossibleChangeCountActive","handleClickAdd","handleClickRemove","removeItemAction","StyledScrollableCatalogContainer","CatalogListTouch","itemIds","itemsList","CatalogTouch"],"mappings":"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","file":"static/js/Catalog.0d52f0da.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport { Body1, Body2, Button2 } from '@sberdevices/plasma-styles';\nimport { accent, buttonSecondary, primary, surfaceLiquid01, warning } from '@sberdevices/plasma-tokens';\nimport { useDispatch } from 'hooks/useDispatch';\nimport { useFocusOnChange } from 'hooks/useFocusOnChange';\nimport { useSelector } from 'hooks/useSelector';\nimport { catalogSelectItemAction } from 'store/actions/catalogPage';\nimport { addItemAction } from 'store/actions/native';\nimport { Badge, BadgeProps } from 'components/Badge/Badge';\nimport { IndexBadge } from 'components/IndexBadge/IndexBadge';\nimport { icon } from 'style/const/icon';\nimport { transition } from 'style/const/transition';\nimport { focusBorderMixin } from 'style/mixin/focus';\nimport { ReactComponent as PlusSvg } from 'assets/icons/plus.svg';\nimport { ReactComponent as DoneSvg } from 'assets/icons/done.svg';\n\nexport const cardWidthPx = 392;\nexport const cardHeightPx = 592;\nexport const cardBorderRadiusPx = 40;\n\nconst thumbSizePx = cardWidthPx;\n\ninterface StyledThumbProps {\n    imageUrl: string;\n}\nconst StyledThumb = styled.div<StyledThumbProps>`\n    display: block;\n    height: ${thumbSizePx}px;\n    width: ${thumbSizePx}px;\n\n    background: rgba(255, 255, 255, 0.04);\n    background-image: url('${(props) => props.imageUrl}');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n\n    border-top-left-radius: ${cardBorderRadiusPx}px;\n    border-top-right-radius: ${cardBorderRadiusPx}px;\n`;\n\nconst descriptionHeightPx = cardHeightPx - thumbSizePx;\nconst descriptionPaddingPx = 32;\n\nconst StyledDescription = styled.div`\n    position: relative;\n\n    height: ${descriptionHeightPx}px;\n\n    box-sizing: border-box;\n    padding: ${descriptionPaddingPx}px;\n\n    border-bottom-left-radius: ${cardBorderRadiusPx}px;\n    border-bottom-right-radius: ${cardBorderRadiusPx}px;\n`;\n\nconst nameLineCount = 2;\n\nconst StyledName = styled(Body1)`\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: ${nameLineCount};\n    overflow: hidden;\n\n    color: ${primary};\n`;\n\nconst StyledPriceContainer = styled.div`\n    position: absolute;\n    bottom: 36px;\n\n    display: flex;\n`;\n\nconst StyledPrice = styled(Body2)`\n    color: ${primary};\n`;\n\nconst StyledOldPrice = styled(Body2)`\n    position: relative;\n    opacity: 0.24;\n    color: ${primary};\n    margin-left: 8px;\n\n    &::before {\n        content: '';\n        position: absolute;\n        top: calc(50% - 2px);\n        border-top: 4px solid ${primary};\n        left: 2px;\n        right: 2px;\n    }\n`;\n\ninterface StyledCountProps {\n    isWarning?: boolean;\n}\nconst StyledCount = styled(Body2)<StyledCountProps>`\n    margin-left: 8px;\n\n    color: ${({ isWarning }) => (isWarning ? warning : accent)};\n`;\n\nconst buttonIconSizePx = icon.m.sizePx;\nconst buttonSizePx = 72;\nconst buttonOffsetXPx = 12;\nconst buttonOffsetYPx = -52;\n\ninterface StyledButtonProps {\n    isDisabled?: boolean;\n}\nconst StyledButton = styled(Button2)<StyledButtonProps>`\n    position: absolute;\n    top: ${buttonOffsetYPx}px;\n    right: ${buttonOffsetXPx}px;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    width: ${buttonSizePx}px;\n    height: ${buttonSizePx}px;\n\n    border-radius: 50%;\n\n    background-color: ${({ isDisabled }) => (isDisabled ? buttonSecondary : accent)};\n\n    opacity: 0;\n\n    transition: opacity ${transition.default}, background-color ${transition.default};\n`;\n\nconst StyledPlusIcon = styled(PlusSvg)`\n    width: ${buttonIconSizePx}px;\n    height: ${buttonIconSizePx}px;\n`;\n\nconst StyledDoneIcon = styled(DoneSvg)`\n    width: ${buttonIconSizePx}px;\n    height: ${buttonIconSizePx}px;\n`;\n\nconst badgePositionPx = 16;\n\nconst CatalogListItemBadge = styled(Badge)`\n    position: absolute;\n    top: ${badgePositionPx}px;\n    left: ${badgePositionPx}px;\n    z-index: 1;\n`;\n\nconst StyledIndexBadge = styled(IndexBadge)`\n    top: 8px;\n    right: 8px;\n`;\n\nconst cardScaleFactor = 1 / 1.04;\nconst addActiveDurationMs = 200;\n\nconst AddAnimation = css`\n    animation-name: ${keyframes`\n        0% {\n            transform: scale(1);\n        }\n        100% {\n            transform: scale(${cardScaleFactor});\n        }\n    `};\n    animation-duration: ${addActiveDurationMs / 2}ms;\n    animation-iteration-count: 2;\n    animation-timing-function: ease-in-out;\n    animation-fill-mode: forwards;\n    animation-direction: alternate;\n`;\n\nconst shakeDurationMs = 200;\nconst shakeAmplitudePx = 10;\n\nconst ShakeAnimation = css`\n    animation-name: ${keyframes`\n        0% {\n            transform: translateX(0);\n        }\n        25% {\n            transform: translateX(${-1 * shakeAmplitudePx}px);\n        }\n        75% {\n            transform: translateX(${shakeAmplitudePx}px);\n        }\n        100% {\n            transform: translateX(0);\n        }\n    `};\n    animation-duration: ${shakeDurationMs}ms;\n    animation-iteration-count: 1;\n    animation-timing-function: ease-in-out;\n    animation-fill-mode: forwards;\n`;\n\ninterface StyledCatalogListItemProps {\n    disabled?: boolean;\n    isActive: boolean;\n    isButtonDisabled?: boolean;\n    isShaking: boolean;\n}\nconst StyledCatalogListItem = styled.div<StyledCatalogListItemProps>`\n    position: relative;\n    width: ${cardWidthPx}px;\n    height: ${cardHeightPx}px;\n\n    display: flex;\n    flex-direction: column;\n    grid-row: 1;\n\n    border-radius: ${cardBorderRadiusPx}px;\n    box-shadow: 0 16px 48px rgba(0, 0, 0, 0.1);\n    background: ${surfaceLiquid01};\n\n    transition: ${addActiveDurationMs / 2}ms ${transition.timingFn.default};\n    will-change: transform;\n    will-change: background-color;\n\n    ${focusBorderMixin({ borderRadius: cardBorderRadiusPx })}\n\n    ${({ disabled, isButtonDisabled }) =>\n        !disabled &&\n        css`\n            &:focus {\n                ${StyledButton} {\n                    opacity: ${isButtonDisabled ? '0.56' : '1'};\n                }\n            }\n        `}\n\n    ${({ disabled }) =>\n        disabled &&\n        css`\n            ${StyledDescription},\n            ${StyledThumb} {\n                opacity: 0.5;\n            }\n        `}\n\n    ${({ isActive }) =>\n        isActive &&\n        css`\n            ${AddAnimation}\n        `}\n\n    ${({ isShaking }) =>\n        isShaking &&\n        css`\n            ${ShakeAnimation}\n        `}\n`;\n\nconst useActive = (count: number) => {\n    const [isCardActive, setCardActive] = React.useState(false);\n    const [isButtonActive, setButtonActive] = React.useState(false);\n    const [displayCount, setDisplayCount] = React.useState(count);\n    const prevCountRef = React.useRef(0);\n\n    // проставление стейта нужно делать обязательно в эффекте,\n    // иначе происходит слишком много перерисовок из-за того что,\n    // мы во время рендера вызываем проставление стейта и так по кругу\n    // реакту такое не нравится\n    React.useEffect(() => {\n        if (count > prevCountRef.current) {\n            const nextCount = count;\n\n            setCardActive(true);\n\n            setTimeout(() => {\n                setButtonActive(true);\n                setDisplayCount(nextCount);\n            }, addActiveDurationMs * 0.5);\n\n            setTimeout(() => {\n                setCardActive(false);\n            }, addActiveDurationMs);\n\n            setTimeout(() => {\n                setButtonActive(false);\n            }, addActiveDurationMs * 1.5);\n        } else {\n            setDisplayCount(count);\n        }\n\n        prevCountRef.current = count;\n    }, [count]);\n\n    return {\n        isCardActive,\n        isButtonActive,\n        displayCount,\n    };\n};\n\nconst useShake = () => {\n    const [isShaking, setShaking] = React.useState(false);\n\n    const doShake = React.useCallback(() => {\n        if (!isShaking) {\n            setShaking(true);\n        }\n\n        setTimeout(() => setShaking(false), shakeDurationMs);\n    }, [isShaking, setShaking]);\n\n    return { isShaking, doShake };\n};\n\nexport interface CatalogListItemProps {\n    id: string;\n}\n\nexport interface CatalogListItemViewProps {\n    imageUrl: string;\n    count: number;\n    isWantMoreThanHave?: boolean;\n    name: string;\n    index: number;\n    price: number;\n    oldPrice?: number;\n    badge?: BadgeProps;\n    disabled?: boolean;\n    isButtonDisabled?: boolean;\n}\n\nexport const CatalogListItemSberbox: React.FC<CatalogListItemProps> = ({ id }) => {\n    const dispatch = useDispatch();\n    const itemFocusHash = useSelector(({ catalogPage }) => catalogPage.itemsFocusHashMap[id] || 0);\n    const {\n        imageUrl,\n        count,\n        isWantMoreThanHave,\n        index,\n        name,\n        price,\n        oldPrice,\n        badge,\n        disabled,\n        isButtonDisabled,\n    } = useSelector(({ catalogPage }) => catalogPage.itemsMap[id]);\n    const { isCardActive, isButtonActive, displayCount } = useActive(count);\n    const { isShaking, doShake } = useShake();\n    const handleFocus = React.useCallback(() => dispatch(catalogSelectItemAction(id)), [dispatch, id]);\n\n    const handleClick = React.useCallback(() => {\n        if (!disabled) {\n            if (isButtonDisabled) {\n                doShake();\n            } else {\n                dispatch(addItemAction({ item: id, count: '1', skipFocus: true }));\n            }\n        }\n    }, [dispatch, id, disabled, isButtonDisabled, doShake]);\n\n    const ref = useFocusOnChange<HTMLDivElement>(undefined, itemFocusHash, 400);\n\n    return (\n        <StyledCatalogListItem\n            ref={ref}\n            tabIndex={0}\n            disabled={disabled}\n            isButtonDisabled={isButtonDisabled}\n            isActive={isCardActive}\n            isShaking={isShaking}\n            onFocus={handleFocus}\n            onClick={handleClick}\n        >\n            {badge ? <CatalogListItemBadge {...badge} /> : null}\n            <StyledIndexBadge size=\"m\" index={index} />\n            <StyledThumb imageUrl={imageUrl} />\n            <StyledDescription>\n                <StyledButton isDisabled={isButtonDisabled}>\n                    {isButtonActive ? <StyledDoneIcon /> : <StyledPlusIcon />}\n                </StyledButton>\n                <StyledName>{name}</StyledName>\n                <StyledPriceContainer>\n                    {price ? <StyledPrice>{price} ₽</StyledPrice> : null}\n                    {oldPrice ? <StyledOldPrice>{oldPrice} ₽</StyledOldPrice> : null}\n                    {displayCount ? <StyledCount isWarning={isWantMoreThanHave}>×{displayCount}</StyledCount> : null}\n                </StyledPriceContainer>\n            </StyledDescription>\n        </StyledCatalogListItem>\n    );\n};\n","import React from 'react';\n\nexport const useFocusOnChange = <T = HTMLElement>(\n    forwardRef: React.RefObject<T> | undefined,\n    hash: unknown,\n    timeout = 0,\n) => {\n    const ref = React.useRef<T>(null);\n\n    const onChangeFocusRef = forwardRef || ref;\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            if (hash && onChangeFocusRef.current instanceof HTMLElement) {\n                onChangeFocusRef.current.focus();\n            }\n        }, timeout);\n    }, [onChangeFocusRef, hash, timeout]);\n\n    return onChangeFocusRef;\n};\n","import { catalogListScrollSpeed } from 'pages/Catalog/Catalog.const/common';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'hooks/useSelector';\nimport { layout } from 'style/const/layout@sberbox';\nimport { preventScroll } from 'tools/scroll';\n\nimport { CatalogListItemSberbox, cardHeightPx } from '../ListItem/CatalogListItem@sberbox';\n\nconst StyledCatalogList = styled.div`\n    --spatial-navigation-contain: contain;\n\n    position: relative;\n\n    height: ${layout.contentHeight}px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    overflow: hidden;\n`;\n\nexport const cardGapPx = 32;\n\nconst StyledWrapper = styled.div`\n    box-sizing: border-box;\n    width: max-content;\n    height: ${cardHeightPx}px;\n    min-width: 100%;\n\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 392px);\n    grid-auto-flow: row;\n    grid-gap: ${cardGapPx}px;\n\n    will-change: transform;\n\n    transition: transform ${catalogListScrollSpeed}ms ease-in-out;\n`;\n\nexport const CatalogListSberbox: React.FC = () => {\n    const order = useSelector(({ catalogPage }) => catalogPage.order);\n    const wrapperXShift = useSelector(({ catalogPage }) => catalogPage.wrapperXShift);\n\n    const wrapperStyle = React.useMemo(\n        () => ({\n            transform: `translateX(${-1 * wrapperXShift}px)`,\n        }),\n        [wrapperXShift],\n    );\n\n    return (\n        <StyledCatalogList onScroll={preventScroll}>\n            <StyledWrapper style={wrapperStyle}>\n                {order.map((itemId) => (\n                    <CatalogListItemSberbox key={itemId} id={itemId} />\n                ))}\n            </StyledWrapper>\n        </StyledCatalogList>\n    );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { surfaceLiquid01, surfaceLiquid02 } from '@sberdevices/plasma-tokens';\nimport { Skeleton } from 'components/Skeleton/Skeleton';\nimport { layout } from 'style/const/layout@sberbox';\n\nimport { cardWidthPx, cardHeightPx } from '../ListItem/CatalogListItem@sberbox';\nimport { cardGapPx } from '../List/CatalogList@sberbox';\n\nconst columnCount = Math.floor((layout.width + cardGapPx) / (cardWidthPx + cardGapPx)) + 1;\n\nconst getWidthByCount = (count: number) => cardWidthPx * count + cardGapPx * (count - 1);\n\nconst skeletonWidth = getWidthByCount(columnCount);\n\nconst skeletonPaddingX = (layout.width - getWidthByCount(columnCount - 1)) / 2;\nconst skeletonPaddingY = (layout.contentHeight - cardHeightPx) / 2;\n\nconst backgroundColor = surfaceLiquid01;\nconst foregroundColor = surfaceLiquid02;\n\nconst StyledRoot = styled.div`\n    box-sizing: border-box;\n    height: ${layout.contentHeight}px;\n    padding-left: ${skeletonPaddingX}px;\n    padding-top: ${skeletonPaddingY}px;\n`;\n\nexport const CatalogSkeletonSberbox: React.FC = () => (\n    <StyledRoot>\n        <Skeleton\n            width={skeletonWidth}\n            height={cardHeightPx}\n            backgroundColor={backgroundColor}\n            foregroundColor={foregroundColor}\n            itemWidth={cardWidthPx}\n            itemHeight={cardHeightPx}\n            borderRadius={40}\n            rowCount={1}\n            columnCount={columnCount}\n            paddingBetweenRows={cardGapPx}\n            paddingBetweenColumns={cardGapPx}\n            speed={2}\n        />\n    </StyledRoot>\n);\n","import React from 'react';\nimport { useSelector } from 'hooks/useSelector';\n\nimport { CatalogListSberbox } from './List/CatalogList@sberbox';\nimport { CatalogSkeletonSberbox } from './Skeleton/CatalogSkeleton@sberbox';\n\nconst CatalogSberbox: React.FC = () => {\n    const order = useSelector(({ catalogPage }) => catalogPage.order);\n\n    return order.length ? <CatalogListSberbox /> : <CatalogSkeletonSberbox />;\n};\n\nexport default CatalogSberbox;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button2, ParagraphText1 } from '@sberdevices/plasma-styles';\nimport { primary, surfaceLiquid01 } from '@sberdevices/plasma-tokens';\nimport { ReactComponent as AddSvg } from 'assets/icons/add.svg';\nimport { ReactComponent as RemoveSvg } from 'assets/icons/remove.svg';\nimport { useDispatch } from 'hooks/useDispatch';\nimport { useSelector } from 'hooks/useSelector';\nimport { addItemAction, removeItemAction } from 'store/actions/native';\nimport { IndexBadge } from 'components/IndexBadge/IndexBadge';\nimport { BadgeType } from 'components/Badge/Badge';\n\nconst cardBorderRadiusPx = 20;\n\nconst StyledListItem = styled.div`\n    position: relative;\n    border-radius: ${cardBorderRadiusPx}px;\n    background-color: ${surfaceLiquid01};\n    color: ${primary};\n`;\n\ninterface StyledThumbProps {\n    imageUrl: string;\n}\n\nconst StyledThumb = styled.div<StyledThumbProps>`\n    display: block;\n    width: 100%;\n    height: 168px;\n\n    background-image: url('${({ imageUrl }) => imageUrl}');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n\n    border-top-left-radius: ${cardBorderRadiusPx}px;\n    border-top-right-radius: ${cardBorderRadiusPx}px;\n`;\n\nconst StyledIndexBadge = styled(IndexBadge)`\n    top: 8px;\n    right: 8px;\n    color: ${primary};\n`;\n\nconst StyledAddIcon = styled(AddSvg)`\n    height: 12px;\n    width: 12px;\n`;\n\nconst StyledRemoveIcon = styled(RemoveSvg)`\n    height: 12px;\n    width: 12px;\n`;\n\nconst StyledDescription = styled.div`\n    padding: 8px 16px 0;\n`;\n\nconst StyledButtonsContainer = styled.div`\n    padding: 12px;\n    margin-top: 6px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n`;\n\nconst StyledName = styled.div`\n    color: ${primary};\n    font-size: 14px;\n    height: 36px;\n\n    display: block;\n    display: -webkit-box;\n\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`;\n\ntype StyledTouchButtonProps = {\n    disabled?: boolean;\n};\n\nconst StyledTouchButton = styled(Button2)<StyledTouchButtonProps>`\n    cursor: pointer;\n    padding: 11px 20px;\n    text-align: center;\n    background-color: ${surfaceLiquid01};\n    border-radius: 12px;\n    width: 100%;\n    opacity: ${({ disabled }) => (disabled ? 0.2 : 1)};\n`;\n\nconst StyledCountTouchButton = styled(Button2)`\n    cursor: pointer;\n    background-color: ${surfaceLiquid01};\n    border-radius: 12px;\n    display: flex;\n    width: 40px;\n    height: 40px;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n`;\n\ninterface CatalogListItemTouchProps {\n    id: string;\n}\n\nexport interface CatalogListItemTouchViewProps {\n    imageUrl: string;\n    count: number;\n    name: string;\n    index: number;\n    price: number;\n    badge?: BadgeType;\n    disabled?: boolean;\n    buttonDisabled?: boolean;\n}\n\nexport const CatalogListItemTouch: React.FC<CatalogListItemTouchProps> = ({ id }) => {\n    const dispatch = useDispatch();\n    const { imageUrl, count, index, name, price, disabled } = useSelector(\n        ({ catalogPageTouch }) => catalogPageTouch.itemsMap[id],\n    );\n    const isPossibleChangeCountActive = count > 0;\n\n    const handleClickAdd = React.useCallback(() => {\n        if (!disabled) {\n            dispatch(addItemAction({ item: id, count: '1' }));\n        }\n    }, [dispatch, id, disabled]);\n\n    const handleClickRemove = React.useCallback(() => {\n        if (!disabled) {\n            dispatch(removeItemAction({ item: id, count: '1' }));\n        }\n    }, [dispatch, id, disabled]);\n\n    return (\n        <StyledListItem tabIndex={0}>\n            <StyledThumb imageUrl={imageUrl} />\n            <StyledIndexBadge size=\"xs\" index={index} />\n            <StyledDescription>\n                <StyledName>{name}</StyledName>\n            </StyledDescription>\n            <StyledButtonsContainer>\n                {isPossibleChangeCountActive ? (\n                    <>\n                        <StyledCountTouchButton onClick={handleClickRemove}>\n                            <StyledRemoveIcon />\n                        </StyledCountTouchButton>\n                        <ParagraphText1>{count}</ParagraphText1>\n                        <StyledCountTouchButton onClick={handleClickAdd}>\n                            <StyledAddIcon />\n                        </StyledCountTouchButton>\n                    </>\n                ) : (\n                    <StyledTouchButton onClick={handleClickAdd} disabled={disabled}>\n                        {price} ₽\n                    </StyledTouchButton>\n                )}\n            </StyledButtonsContainer>\n        </StyledListItem>\n    );\n};\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'hooks/useSelector';\n\nimport { CatalogListItemTouch } from '../ListItem/CatalogListItem@touch';\n\nconst StyledCatalogList = styled.div`\n    width: 100%;\n    height: 100%;\n    overflow-y: auto;\n    padding: 6px 14px;\n    box-sizing: border-box;\n`;\n\nconst StyledScrollableCatalogContainer = styled.div`\n    display: grid;\n    grid-gap: 9px;\n    grid-template-columns: 1fr 1fr;\n`;\n\nexport const CatalogListTouch: React.FC = () => {\n    const itemIds = useSelector(({ catalogPageTouch }) => catalogPageTouch.order);\n    const itemsList = React.useMemo(() => itemIds.map((itemId) => <CatalogListItemTouch key={itemId} id={itemId} />), [\n        itemIds,\n    ]);\n\n    return (\n        <StyledCatalogList>\n            <StyledScrollableCatalogContainer>{itemsList}</StyledScrollableCatalogContainer>\n        </StyledCatalogList>\n    );\n};\n","import React from 'react';\n\nimport { CatalogListTouch } from './List/CatalogList@touch';\n\nconst CatalogTouch: React.FC = () => {\n    return <CatalogListTouch />;\n};\n\nexport default CatalogTouch;\n"],"sourceRoot":""}